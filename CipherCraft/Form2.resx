<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        3//l5eX/5ubm/+jo6P+8vLz/JI6O/xTi4v8V3t3/FNHP/xKpqP8USknNNigoH///AAE8bpOVFoDK/xxi
        mf84KSv/MYEN/0jhFf9J4hT/Npwq/yEewv8jGun/Ixrp/xcOkf8JP0T/Eb29/xPZ2f8V4OD/FePj/xHK
        yv9dhob/4uDg/+Tk5P/k5OT/6Ojo/728vP8jhob/FN/f/xXf3/8V4OD/FeHh/xWBgO8jHx9CAABsADBX
        dHwtRmL/iS4V/64xAf9InA//R+EV/0niFP82miv/IR7G/yIY5v8bFqv/CxAy/xkcG/9DZmb/JnZ1/xSL
        i/8RsLD/Dq2t/1Jxcf/i4OD/6Ojo/+Xl5f/o6Oj/v729/yOBgf8U3t7/Fd/f/xXf3/8V4eH/EIeG8AgK
        CkR1AAAAYTMldKcsBf/gNwD/ujcB/0agEP9I4RX/SeIU/zSVKP8cGKj/GiN6/ylyJf8newv/aW5n/9nX
        1//Avr7/l5qa/25/f/8yTU3/Gh4d/4aFhP+/wcH/2Nrb/+fo6P/DwsL/JoGB/xTe3v8V39//Fd/f/xXh
        4f8PiorwAgYGQwAA/wCDKQ2U1jYB/+I4AP+3OAP/SqQV/0zjGv9H2xT/I2kO/xc7JP82pBX/SN4T/zWl
        EP95gXf/6Ofo/+fn5//m5ub/5uXl/7e3t/9DKCD/fyIE/3w0Hf9xTEL/gHNv/3BsbP8WV1f/E87P/xXf
        4P8V4eL/FePj/w+QkPIXHR1OAAAAAIchAZTXNgD/4jgA/7M5A/9HqhL/RMoX/yxxKf8SJyf/N6kQ/0nj
        Ff9J4hX/NKEQ/3qAeP/n5uf/5OTk/+Li4v/n5+f/09bW/4BHNf/ZNAD/3TYA/8owAP+sKgD/ZRkA/xAZ
        Df8UY0b/E4Z4/xKopv8Txcf/FIOE9j0/P2QAAAAAjyMBlNg2AP/jOAD/pTAC/yxjEv8eREv/Hxix/yIx
        hv9AxBb/SOEV/0niFf8zoBD/eoB4/+fm5//m5ub/5eXl/+fn5//T1db/f0g2/9c0AP/gOAD/4DgA/+M5
        AP/CLwH/PFQJ/zy8EP83pxH/LIwc/x1yMf8XPy3kNjM1NUF9kQmaNhas3DYA/8cxAP9TGAf/EQ5m/yAX
        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
        AAAAAAAAAAAAAQAAAAeAAAA/+AAA///AA/8=
</value>
  </data>
</root>